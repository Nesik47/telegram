import os
import asyncio
import logging
import sqlite3
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.filters import Command
from datetime import datetime, timedelta
from aiogram.client.default import DefaultBotProperties
from dotenv import load_dotenv

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ –∑ .env
load_dotenv()

TOKEN = os.getenv("TOKEN")
CHAT_ID = int(os.getenv("CHAT_ID"))
ADMIN_IDS = list(map(int, os.getenv("ADMIN_IDS").split(',')))

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()
logging.basicConfig(level=logging.INFO)

# === –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ë–î ===
def init_db():
    with sqlite3.connect("bot_data.db") as conn:
        cursor = conn.cursor()
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            last_message_time TEXT,
            welcomed INTEGER DEFAULT 0
        )""")
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS banned_users (
            user_id INTEGER PRIMARY KEY,
            ban_until TEXT
        )""")
        conn.commit()

init_db()

# === –§—É–Ω–∫—Ü—ñ—ó —Ä–æ–±–æ—Ç–∏ –∑ –±–∞–Ω–æ–º ===
def ban_user(user_id: int, days: int = 0):
    ban_until = (datetime.now() + timedelta(days=days)).strftime("%Y-%m-%d %H:%M:%S") if days > 0 else "permanent"
    with sqlite3.connect("bot_data.db") as conn:
        cursor = conn.cursor()
        cursor.execute("INSERT OR REPLACE INTO banned_users (user_id, ban_until) VALUES (?, ?)", (user_id, ban_until))
        conn.commit()

def unban_user(user_id: int):
    with sqlite3.connect("bot_data.db") as conn:
        cursor = conn.cursor()
        cursor.execute("DELETE FROM banned_users WHERE user_id=?", (user_id,))
        conn.commit()

def is_banned(user_id: int) -> bool:
    with sqlite3.connect("bot_data.db") as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT ban_until FROM banned_users WHERE user_id=?", (user_id,))
        result = cursor.fetchone()
        if result:
            if result[0] == "permanent":
                return True
            return datetime.now() < datetime.strptime(result[0], "%Y-%m-%d %H:%M:%S")
        return False

# === –û–±–º–µ–∂–µ–Ω–Ω—è —á–∞—Å—Ç–æ—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å ===
def can_send_message(user_id: int) -> bool:
    with sqlite3.connect("bot_data.db") as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT last_message_time FROM users WHERE user_id=?", (user_id,))
        result = cursor.fetchone()
    
    if result and result[0]:
        try:
            last_message_time = datetime.strptime(result[0], "%Y-%m-%d %H:%M:%S")
            if datetime.now() - last_message_time < timedelta(minutes=5):
                return False  
        except ValueError:
            return True  

    return True

def update_message_time(user_id: int):
    with sqlite3.connect("bot_data.db") as conn:
        cursor = conn.cursor()
        cursor.execute("INSERT INTO users (user_id, last_message_time) VALUES (?, ?) ON CONFLICT(user_id) DO UPDATE SET last_message_time=excluded.last_message_time", 
                       (user_id, datetime.now().strftime("%Y-%m-%d %H:%M:%S")))
        conn.commit()

# === –ö–æ–º–∞–Ω–¥–∞ /start ===
@dp.message(Command("start"))
async def start_command(message: Message):
    await message.answer("üëã –í—ñ—Ç–∞—î–º–æ! –Ø–∫—â–æ —Å—Ç–∞–ª–∏ —Å–≤—ñ–¥–∫–∞–º–∏ –≤–∞–∂–ª–∏–≤–∏—Ö –ø–æ–¥—ñ–π, –Ω–∞–¥—Å–∏–ª–∞–π—Ç–µ —ó—Ö –Ω–∞–º.‚ùóÔ∏è–ê–Ω–æ–Ω—ñ–º–Ω—ñ—Å—Ç—å –≥–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–∞.")

# === –ö–æ–º–∞–Ω–¥–∞ /ban –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤ ===
@dp.message(Command("ban"))
async def ban_command(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return
    
    try:
        args = message.text.split()
        user_id = int(args[1])
        days = int(args[2]) if len(args) > 2 else 0
        ban_user(user_id, days)
        await message.answer(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π –Ω–∞ {days if days > 0 else '–±–µ–∑—Å—Ç—Ä–æ–∫–æ–≤–æ'} –¥–Ω—ñ–≤.")
    except (IndexError, ValueError):
        await message.answer("‚ö†Ô∏è –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /ban <user_id> [–¥–Ω—ñ]")

# === –ö–æ–º–∞–Ω–¥–∞ /unban –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤ ===
@dp.message(Command("unban"))
async def unban_command(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return
    
    try:
        args = message.text.split()
        user_id = int(args[1])
        unban_user(user_id)
        await message.answer(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} —Ä–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω–∏–π.")
    except (IndexError, ValueError):
        await message.answer("‚ö†Ô∏è –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /unban <user_id>")

# === –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å ===
@dp.message()
async def forward_message(message: Message):
    if message.chat.id == CHAT_ID or message.text == "/start":
        return  

    if is_banned(message.from_user.id):
        await message.answer("üö´ –í–∏ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ —Ç–∞ –Ω–µ –º–æ–∂–µ—Ç–µ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")
        return
    
    if not can_send_message(message.from_user.id):
        await message.answer("‚è≥ –í–∏ –º–æ–∂–µ—Ç–µ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ 5 —Ö–≤–∏–ª–∏–Ω.")
        return
    
    user_info = f"üë§ –í—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫: {message.from_user.full_name} (@{message.from_user.username})"
    user_id_info = f"üÜî User ID: {message.from_user.id}"
    caption = f"{user_info}\n{user_id_info}"

    if message.text:
        await bot.send_message(CHAT_ID, f"{caption}\n‚úâÔ∏è {message.text}")
    
    if message.photo:
        caption += f"\nüì∑ –ù–∞–¥—ñ—Å–ª–∞–Ω–æ —Ñ–æ—Ç–æ"
        if message.caption:
            caption += f"\nüìù {message.caption}"
        await bot.send_photo(CHAT_ID, message.photo[-1].file_id, caption=caption)

    if message.video:
        caption += f"\nüé• –ù–∞–¥—ñ—Å–ª–∞–Ω–æ –≤—ñ–¥–µ–æ"
        if message.caption:
            caption += f"\nüìù {message.caption}"
        await bot.send_video(CHAT_ID, message.video.file_id, caption=caption)

    if message.document:
        caption += f"\nüìÇ –ù–∞–¥—ñ—Å–ª–∞–Ω–æ —Ñ–∞–π–ª"
        if message.caption:
            caption += f"\nüìù {message.caption}"
        await bot.send_document(CHAT_ID, message.document.file_id, caption=caption)
    
    update_message_time(message.from_user.id)
    await message.answer("‚úÖ –í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ! –í–¥—è—á–Ω—ñ, —â–æ –¥–æ–≤—ñ—Ä—è—î—Ç–µ –Ω–∞–º ü§ù")

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
async def main():
    logging.info("üöÄ –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞...")
    await dp.start_polling(bot, skip_updates=True)

if __name__ == "__main__":
    asyncio.run(main())
